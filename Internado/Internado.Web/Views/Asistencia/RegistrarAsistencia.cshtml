@model List<Internado.Infrastructure.Models.Residente>

@{
    var curso = ViewBag.Curso as Internado.Infrastructure.Models.Curso;
    var fecha = ViewBag.Fecha as DateTime? ?? DateTime.Today;
    var asistencias = ViewBag.Asistencias as Dictionary<int, string> ?? new();
    var observaciones = ViewBag.Observaciones as Dictionary<int, string> ?? new();
    ViewData["Title"] = $"Registrar Asistencia - {curso?.Nombre}";
}

<div class="container mt-4">
    <h2><i class="bi bi-check2-circle"></i> @curso?.Nombre - @fecha.ToString("dd/MM/yyyy")</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="bi bi-check-circle"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <form asp-action="GuardarAsistencia" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="cursoId" value="@curso?.Id" />
        <input type="hidden" name="fecha" value="@fecha.ToString("yyyy-MM-dd")" />

        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width: 30%;">Residente</th>
                    <th style="width: 20%;">Estado</th>
                    <th style="width: 50%;">Excusa/Justificación (opcional)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var residente in Model)
                {
                    var estadoActual = asistencias.TryGetValue(residente.Id, out var estado) ? estado : "Presente";
                    var observacionActual = observaciones.TryGetValue(residente.Id, out var obs) ? obs : "";
                    <tr>
                        <td>@residente.NombreCompleto</td>
                        <td>
                            <select name="asistencia[residente_@residente.Id]"
                                    class="form-select form-select-sm estado-select"
                                    data-residente="@residente.Id">
                                <option value="Presente" selected="@(estadoActual == "Presente")">Presente</option>
                                <option value="Ausente" selected="@(estadoActual == "Ausente")">Ausente</option>
                                <option value="Tarde" selected="@(estadoActual == "Tarde")">Tarde</option>
                            </select>
                        </td>
                        <td>
                            <input type="text"
                                   name="excusa[residente_@residente.Id]"
                                   class="form-control form-control-sm excusa-input"
                                   data-residente="@residente.Id"
                                   value="@observacionActual"
                                   placeholder="Ej: Cita médica, asunto familiar..."
                                   maxlength="250" />
                            <small class="text-muted" id="excusa-help-@residente.Id" style="display: none;">
                                <i class="bi bi-info-circle"></i> Campo recomendado para Ausente o Tarde
                            </small>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button type="submit" class="btn btn-success">
            <i class="bi bi-check-lg"></i> Guardar Asistencia
        </button>
        <a href="@Url.Action("Index")" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Volver
        </a>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Función para mostrar/ocultar ayuda de excusa
            function toggleExcusaHelp(select) {
                const residenteId = select.getAttribute('data-residente');
                const helpText = document.getElementById('excusa-help-' + residenteId);
                const excusaInput = document.querySelector('.excusa-input[data-residente="' + residenteId + '"]');

                if (select.value === 'Ausente' || select.value === 'Tarde') {
                    helpText.style.display = 'block';
                    excusaInput.classList.add('border-warning');
                } else {
                    helpText.style.display = 'none';
                    excusaInput.classList.remove('border-warning');
                }
            }

            // Aplicar a todos los selects al cargar
            document.querySelectorAll('.estado-select').forEach(function(select) {
                toggleExcusaHelp(select);

                // Agregar evento change
                select.addEventListener('change', function() {
                    toggleExcusaHelp(this);
                });
            });
        });
    </script>
}

